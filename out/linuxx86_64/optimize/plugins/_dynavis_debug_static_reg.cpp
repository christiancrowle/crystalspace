/ This file is automatically generated.
#include "cssysdef.h"
#include "csutil/scf.h"

/ Put static linking stuff into own section.
/ The idea is that this allows the section to be swapped out but not
// swapped in again b/c something else in it was needed.
#if !defined(CS_DEBUG) && defined(CS_COMPILER_MSVC)
#pragma const_seg(".CSmetai")
#pragma comment(linker, "/section:.CSmetai,r")
#pragma code_seg(".CSmeta")
#pragma comment(linker, "/section:.CSmeta,er")
#pragma comment(linker, "/merge:.CSmetai=.CSmeta")
#endif

namespace csStaticPluginInit
{
static char const metainfo_dynavis_debug[] =
"<?xml version=\"1.0\"?>"
"<!-- dynavis_debug.csplugin -->"
"<plugin>"
"  <scf>"
"    <classes>"
"      <class>"
"        <name>crystalspace.culling.dynavis_debug</name>"
"        <implementation>csDynaVis_DEBUG</implementation>"
"        <description>Dynamic Visibility System (Debug Version)</description>"
"      </class>"
"    </classes>"
"  </scf>"
"</plugin>"
;
  #ifndef csDynaVis_DEBUG_FACTORY_REGISTER_DEFINED 
  #define csDynaVis_DEBUG_FACTORY_REGISTER_DEFINED 
    SCF_DEFINE_FACTORY_FUNC_REGISTRATION(csDynaVis_DEBUG) 
  #endif

class dynavis_debug
{
SCF_REGISTER_STATIC_LIBRARY(dynavis_debug,metainfo_dynavis_debug)
  #ifndef csDynaVis_DEBUG_FACTORY_REGISTERED 
  #define csDynaVis_DEBUG_FACTORY_REGISTERED 
    csDynaVis_DEBUG_StaticInit csDynaVis_DEBUG_static_init__; 
  #endif
public:
 dynavis_debug();
};
dynavis_debug::dynavis_debug() {}

}
